# 1. 정의
# DP(동적 계획법)
# 입력 크기가 작은 부분 문제들을 해결한 후, 해당 부분 문제의 해를 활용해서,
# 보다큰 크기의 부분 문제를 해결, 최종적으로 전체 문제를 해결하는 알고리즘
# 메모이제이션: 프로그램 실행시 이전에 계산한 값을 저장하여, 다시 계산하지 않도록 하여 전체 실행 속도를 빠르게 하는 기술

# 분할 정복
# 문제가 나눌 수 없을 때까지 나누어서 각각을 풀면서 다시 합병하여 문제의 답을 얻는 알고리즘

# 2. 공통점과 차이점

# 공통점
# 문제를 잘게 쪼개서, 가장 작은 단위로 분할

# 차이점
# 동적 계획법
# 상향식 접근법으로 가장 최하위 해답을 구한 후, 이를 저장하고 이용하여 상위 문제를 풀어가는 방식
# 분할 정복
# 하양식 접근법으로 상위의 해답을 구하기 위해 아래로 내려가면서 하위의 해답을 구하는 방식

# 3. 동적 계획법 알고리즘 이해

# 피보나치 수열 재귀
def fivonachi1(num):
    if num <= 1:
        return num
    else:
        return fivonachi1(num-1) + fivonachi1(num-2)

# 피보나치 수열 동적계획법
def fivonachi2(num):
    cache = [0 for i in range(num+1)]
    cache[0] = 0
    cache[1] = 1

    for i in range(2,num):
        cache[i] = cache[i-1] + cache[i-2]

    return cache[num]



    




